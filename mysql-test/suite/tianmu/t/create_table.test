--source include/have_tianmu.inc

--echo #
--echo # Test table name
--echo #

drop table if exists t1,t2,t3,t4,t5;
drop database if exists mysqltest;
drop view if exists v1;
create table t1 (b char(0) not null)ENGINE=tianmu;
--error 1048
insert into t1 values (""),(null);
create table if not exists t1 (b char(0) not null)ENGINE=tianmu;
--error 1050
create table t1 (b char(0) not null)engine=tianmu;
drop table t1;
create table `a/a` (a int)engine=tianmu;
show create table `a/a`;
create table t1 like `a/a`;
drop table `a/a`,`t1`;

--echo #
--echo # Tests the long field name table
--echo #

--error 1059
create table `aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa` (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa int)engine=tianmu;
--error 1059
create table a (`aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa` int)engine=tianmu;
--error 1067
create table t1 (a int default 100 auto_increment)engine=tianmu;
--error 1067
create table t1 (a tinyint default 1000)engine=tianmu;
--error 1067
create table t1 (a varchar(5) default 'abcdef')engine=tianmu;
create table t1 (a varchar(5) default 'abcde')engine=tianmu;
insert into t1 values();
select * from t1;
--error 1067
alter table t1 alter column a set default 'abcdef';
drop table t1;

--echo #
--echo # test of dummy table names
--echo #

create table 1ea10 (1a20 int,1e int)engine=tianmu;
insert into 1ea10 values(1,1);
select 1ea10.1a20,1e+ 1e+10 from 1ea10;
drop table 1ea10;
create table t1 (t1.index int)engine=tianmu;
drop table t1;
create database mysqltest;
use mysqltest;
create table mysqltest.test2$ (a int);
drop table mysqltest.test2$;
drop database mysqltest;
--error 1103
create table `` (a int)engine=tianmu;
--error 1103
drop table if exists ``;
use test;
--error 1166
create table t1 (`` int)engine=tianmu;
#-error 1280
#create table t1 (i int, index `` (i))engine=tianmu;
create table t1 (i int)engine=tianmu;
drop table t1;

--echo #
--echo # Test of CREATE ... select with indexes
--echo #

create table t1 (a int auto_increment not null primary key, B CHAR(20))engine=tianmu;
insert into t1 (b) values ("hello"),("my"),("world");
explain select * from t1 where b="world";
select * from t1 where b="world";
drop table t1;

--echo #
--echo # Test of primary key with 32 index
--echo #


--echo #
--echo # Test default table type
--echo #

set session default_storage_engine="tianmu";
select @@default_storage_engine;
create table t1 (a int not null);
show create table t1;
drop table t1;
--error 1286
set session default_storage_engine="gemini";
set session default_storage_engine=default;
create table t1 ( k1 varchar(2), k2 int, primary key(k1,k2))engine=tianmu;
insert into t1 values ("a", 1), ("b", 2);
--error 1048
insert into t1 values ("c", NULL);
--error 1048
insert into t1 values (NULL, 3);
--error 1048
insert into t1 values (NULL, NULL);
drop table t1;
create table t1 select x'4132';
--error 1050
create table t1 select 1,2,3;
create table if not exists t1 select 1,2;
create table if not exists t1 select 1,2,3,4;
create table if not exists t1 select 1;
select * from t1;
drop table t1;

--echo #
--echo # "Table truncated when creating another table name with Spaces"
--echo #

--error 1103
create table `t1 `(a int)engine=tianmu;
--error 1102
create database `db1 `;
--error 1166
create table t1(`a ` int)engine=tianmu;

--echo #
--echo # "Parser permits multiple commas without syntax error"
--echo #

--error 1064
create table t1 (a int,)engine=tianmu;
--error 1064
create table t1 (a int,,b int)engine=tianmu;
--error 1064
create table t1 (,b int)engine=tianmu;

--echo #
--echo # Test create with foreign keys
--echo #

#create table t1 (a int, key(a))engine=tianmu;
#create table t2 (b int, foreign key(b) references t1(a), key(b))engine=tianmu;
drop table if exists t1;

--echo #
--echo # Test for create table .. LIKE ..
--echo #

create table t1(id int not null, name char(20))engine=tianmu;
insert into t1 values(10,'mysql'),(20,'monty- the creator');
create table t2(id int not null)engine=tianmu;
insert into t2 values(10),(20);
create table t3 like t1;
show create table t3;
select * from t3;
create table if not exists t3 like t1;
select @@warning_count;
--error 1049
create table non_existing_database.t1 like t1;
--error 1146
create table t3 like non_existing_table;
drop table t1,t3;

--echo #
--echo # Test types of data for create select with functions
--echo #

create table t1(a int,b int,c int,
d date,e char,f datetime,g time,
h blob)engine=tianmu;
insert into t1(a)values(1);
insert into t1(a,b,c,d,e,f,g,h)values(2,-2,2,'1825-12-14','a','2003-1-1 3:2:1','4:3:2','binary data');
select * from t1;
select a, 
    ifnull(b,cast(-7 as signed)) as b, 
    ifnull(c,cast(7 as unsigned)) as c, 
    ifnull(d,cast('2000-01-01' as date)) as d, 
    ifnull(e,cast('b' as char)) as e,
    ifnull(f,cast('2000-01-01' as datetime)) as f, 
    ifnull(g,cast('5:4:3' as time)) as g,
    ifnull(h,cast('yet another binary data' as binary)) as h,
    addtime(cast('1:0:0' as time),cast('1:0:0' as time)) as dd 
from t1;
explain t1;
drop table t1;
create table t1 (a tinyint, b smallint, c mediumint,
 d int, e bigint, f float(3,2), g double(4,3),
 h decimal(5,4), i year, j date,
 k timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
 l datetime, o char(10))engine=tianmu;
show create table t1;
drop table t1;
create table t1(str varchar(10) default 'def',strnull varchar(10),
 intg int default '10',rel double default '3.14')engine=tianmu;
insert into t1 values ('','',0,0.0);
describe t1;
drop table t1;
create table t1(name varchar(10), age smallint default -1);
describe t2;
drop table t1,t2;
--echo #
--echo # 'Naming a key "Primary" causes trouble'
--echo #

#--error 1280
#create table t1 (a int, index `primary` (a))engine=tianmu;
#--error 1280
#create table t1 (a int, index `PRIMARY` (a))engine=tianmu;
#drop table t1;
#create table t1 (`primary` int, index(`primary`))engine=tianmu;
#show create table t1;
#drop table t2;
#create table t2 (`PRIMARY` int, index(`PRIMARY`))engine=tianmu;
#show create table t2;
#create table t3 (a int);
#--error 1280
#alter table t3 add index `primary` (a);
#--error 1280
#alter table t3 add index `PRIMARY` (a);
#create table t4 (`primary` int)engine=tianmu;
#drop table t1,t2,t3,t4;

--echo #
--echo #Can't use 'DEFAULT FALSE' for column of type bool
--echo #

create table t1 (b bool not null default false)engine=tianmu;
create table t2 (b bool not null default true)engine=tianmu;
insert into t1 values ();
insert into t2 values ();
select * from t1;
select * from t2;
drop table t1,t2;

--echo #
--echo # Invalid column name is not rejected
--echo #

create database syw_mtr;
use syw_mtr;
--error 1103
create table t1(column.name int)engine=tianmu;
--error 1102
create table t1(test.column.name int)engine=tianmu;
--error 1102
create table t1(xyz.t1.name int)engine=tianmu;
create table t1(t1.name int)engine=tianmu;
create table t2(syw_mtr.t2.name int)engine=tianmu;
drop table t1,t2;
drop database syw_mtr;

--echo #
--echo #create table like
--echo #

use test;
--error 1146
create table test.t1 like x;
drop table if exists test.t1;

--echo #
--echo #Bogus error message on attempt to create table t LIKE view
--echo #

create database mysqltest;
use mysqltest;
create view v1 as select 'foo' from dual;
--error 1347
create table t1 like v1;
drop view v1;
drop database mysqltest;

--echo #
--echo #SET value having comma not correctly handled
--echo #

use test;
--error 1367
create table t1(a set("a,b","c,d") not null);

--echo #
--echo #mysqld segfault when trying to create table with same name as existing view
--echo #

create table t1 (a int);
create table t2 (a int);
insert into t1 values (1),(2),(3);
insert into t2 values (1),(2),(3);
create view v1 as select t1.a FROM t1, t2;
--error 1050
create table v1 as select * FROM t1;
drop view v1;
drop table t1,t2;
SET sql_mode = 'NO_ZERO_DATE';
create table t2(c1 TIMESTAMP, c2 TIMESTAMP DEFAULT 0);
drop table t2;
create table t2(c1 TIMESTAMP NULL);
SET sql_mode = '';
drop table t2;

--echo #
--echo #Tests the default type of year for the created table and inserts a null value
--echo #

create table t1(c1 year default 2008, c2 year default 0);
SHOW create table t1;
insert into t1 values();
select * FROM t1;
drop table t1;

--echo #
--echo # Attempt to create table with invalid default should fail in normal mode
--echo #

--error 1067
create table t1 (dt datetime default '2008-02-31 00:00:00');
set @old_mode= @@sql_mode;
set @@sql_mode='ALLOW_INVALID_DATES';

--echo # The same should be possible in relaxed mode
create table t1 (dt datetime default '2008-02-31 00:00:00');
set @@sql_mode= @old_mode;
--error 1067
create table t2 like t1;
set @@sql_mode='ALLOW_INVALID_DATES';
create table t2 like t1;
show create table t1;
show create table t2;
set @@sql_mode= @old_mode;
drop tables t1,t2;

--echo #
--echo # Creating a base table in presence of an updatable view.
--echo # 

create table t2 (a int primary key);
create view t1 as select a from t2;
insert into t1 (a) values (1);
--error 1050
create table t1 (a int);
create table if not exists t1 (a int);
--error 1050
create table t1 (a int) select 2 as a;
select * from t1;
create table if not exists t1 (a int) select 2 as a;
select * from t1;
select * from t2;
create temporary table if not exists t1 (a int) select 3 as a;
select * from t1;
select * from t2;
drop table t1,t2;
drop view t1;

--echo #
--echo # Repeating the test with a view select a constant number
--echo #

create view t1 as select 1 as a;
--error 1471
insert into t1 (a) values (1);
--error 1288
update t1 set a=3 where a=2;
--error 1050
create table t1 (a int);
create table if not exists t1 (a int);
--error 1050
create table t1 (a int) select 2 as a;
select * from t1;
# Note: an essential warning.
create table if not exists t1 (a int) select 2 as a;
select * from t1;
create temporary table if not exists t1 (a int) select 3 as a;
select * from t1;
# Note: an essential warning.
create temporary table if not exists t1 (a int) select 4 as a;
select * from t1;
drop temporary table t1;
drop view t1;

--echo # Test cases added for coverage.
create table t1(fld1 DATETIME NOT NULL DEFAULT '1111:11:11');
show create table t1;
drop table t1;

--echo # create table..select based on trigger fields.
create table t1 (fld1 int, fld2 DATETIME DEFAULT '1211:1:1');
show create table t1;

--echo # error of support type
--error 6
create table t_unsupport_type (a2 json DEFAULT NULL);

# test new type bit
drop table if exists bittypes;
create table bittypes (
 id int not null primary key,

 bit1 bit(1),
 bit2 bit(2),
 bit4 bit(4),
 bit8 bit(8),
 bit16 bit(16),
 bit32 bit(32),
 bit63 bit(63)

) ENGINE=tianmu DEFAULT CHARSET=utf8mb4;
show create table bittypes;
drop table bittypes;

--error 6
create table tc(a bit(64)) engine=tianmu;
