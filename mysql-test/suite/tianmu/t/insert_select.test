--source include/have_tianmu.inc

--echo #
--echo # Problem with INSERT ... SELECT
--echo #

--disable_warnings
DROP DATABASE IF EXISTS insert_select_db;
--enable_warnings

CREATE DATABASE insert_select_db;
USE insert_select_db;

SET sql_mode = 'NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER';
create table t1 (bandID MEDIUMINT NOT NULL PRIMARY KEY, payoutID SMALLINT NOT NULL);
insert into t1 (bandID,payoutID) VALUES (1,6),(2,6),(3,4),(4,9),(5,10),(6,1),(7,12),(8,12);
create table t2 (payoutID SMALLINT NOT NULL PRIMARY KEY);
insert into t2 (payoutID) SELECT DISTINCT payoutID FROM t1;

select * from t2 order by payoutID;
drop table t1,t2;

--echo #
--echo # Test of insert ... select from same table
--echo #

create table t1 (a int not null);
create table t2 (a int not null);
insert into t1 values (1);
insert into t1 values (a+2);
insert into t1 values (a+3);
insert into t1 values (4),(a+5);
insert into t1 select * from t1;
--sorted_result
select * from t1;
insert into t1 select * from t1 as t2;
--sorted_result
select * from t1;
insert into t2 select * from t1 as t2;
--sorted_result
select * from t1;
insert into t1 select t2.a from t1,t2;
--sorted_result
select * from t1;
--error 1066
insert into t1 select * from t1,t1;
drop table t1,t2;

--echo #
--echo # Item_func_isnull::update_used_tables() did not update 
--echo #            const_item_cache

create table t1(f1 varchar(5) key);
insert into t1(f1) select if(max(f1) is null, '2000',max(f1)+1) from t1;
insert into t1(f1) select if(max(f1) is null, '2000',max(f1)+1) from t1;
insert into t1(f1) select if(max(f1) is null, '2000',max(f1)+1) from t1;
select * from t1;
drop table t1;

--echo #
--echo # values() fails with 'ambiguous' or returns NULL 
--echo #            with ON DUPLICATE and SELECT
create table t1(x int, y int);
create table t2(x int, z int);
insert into t1(x,y) select x,z from t2 on duplicate key update x=values(x);
--error 1054
insert into t1(x,y) select x,z from t2 on duplicate key update x=values(z);
--error 1054
insert into t1(x,y) select x,z from t2 on duplicate key update x=values(t2.x);
drop table t1,t2; 

--echo #
--echo # INSERT INTO SELECT inserts values even if
--echo # SELECT statement itself returns empty
--echo #

CREATE TABLE t1 (
    f1 int(10) NOT NULL auto_increment PRIMARY KEY,
    f2 varchar(100) NOT NULL default ''
);
CREATE TABLE t2 (
    f1 varchar(10) NOT NULL default '',
    f2 char(3) NOT NULL default '',
    PRIMARY KEY  (`f1`)
);

INSERT INTO t1 values(NULL, '');
INSERT INTO `t2` VALUES ('486878','WDT'),('486910','WDT');
SELECT COUNT(*) FROM t1;

SELECT min(t2.f1) FROM t1, t2 where t2.f2 = 'SIR' GROUP BY t1.f1;

SELECT COUNT(*) FROM t1;
SELECT * FROM t1;
DROP TABLE t1, t2;

--echo #
--echo # INSERT ... SELECT ... JOIN results in ambiguous field list error
--echo #
CREATE TABLE t1 (x int, y int);
CREATE TABLE t2 (z int, y int);
CREATE TABLE t3 (a int, b int);
INSERT INTO t3 (SELECT x, y FROM t1 JOIN t2 USING (y) WHERE z = 1);
DROP TABLE IF EXISTS t1,t2,t3;

--echo #
--echo # Column count doesn't match value count at row x
--echo #
CREATE DATABASE bug21774_1;
CREATE DATABASE bug21774_2;

CREATE TABLE bug21774_1.t1(id VARCHAR(10) NOT NULL,label VARCHAR(255));
CREATE TABLE bug21774_2.t1(id VARCHAR(10) NOT NULL,label VARCHAR(255));
CREATE TABLE bug21774_1.t2(id VARCHAR(10) NOT NULL,label VARCHAR(255));

INSERT INTO bug21774_2.t1 SELECT t1.* FROM bug21774_1.t1;

use bug21774_1;
INSERT INTO bug21774_2.t1 SELECT t1.* FROM t1;

DROP DATABASE bug21774_1;
DROP DATABASE bug21774_2;

--echo #
--echo # wrong result, when INSERT t1 SELECT ... FROM t1 ON DUPLICATE
--echo #
use insert_select_db;
CREATE TABLE t1 (f1 INT, f2 INT );
CREATE TABLE t2  (f1 INT PRIMARY KEY, f2 INT);
INSERT INTO t1 VALUES (1,1),(2,2),(10,10);
INSERT INTO t2 (f1, f2) SELECT f1, f2 FROM t1;
INSERT INTO t2 (f1, f2)
  SELECT f1, f1 FROM t2 src WHERE f1 < 2
  ON DUPLICATE KEY UPDATE f1 = 100 + src.f1;
SELECT * FROM t2;
DROP TABLE t1, t2;

--echo #
--echo # Assertion fail on duplicate key
--echo # error in 'INSERT ... SELECT' statements
--echo #

CREATE TABLE t1 ( a INT KEY, b INT );
INSERT INTO t1 VALUES ( 0, 1 );
--error ER_DUP_ENTRY
INSERT INTO t1 ( b ) SELECT MAX( b ) FROM t1 WHERE b = 2;
DROP TABLE t1;

--echo #
--echo #incorrect pushing of LIMIT into
--echo # the temporary table ignoring ORDER BY clause
--echo #

CREATE TABLE t1 (
  id INT AUTO_INCREMENT PRIMARY KEY,
  prev_id INT,
  join_id INT DEFAULT 0);

INSERT INTO t1 (prev_id) VALUES (NULL), (1), (2);
SELECT * FROM t1;

CREATE TABLE t2 (join_id INT);
INSERT INTO t2 (join_id) VALUES (0);

INSERT INTO t1 (prev_id) SELECT id
  FROM t2 LEFT JOIN t1 ON t1.join_id = t2.join_id
  ORDER BY id DESC LIMIT 1;
SELECT * FROM t1;

DROP TABLE t1,t2;

--echo #
--echo #DASH '-' IS NOT RECOGNIZED IN CHARSET ARMSCII8 ON SELECT WHERE QUERY
--echo #

CREATE TABLE t1 (
  id INT AUTO_INCREMENT PRIMARY KEY,
  a VARCHAR(100) CHARACTER SET ARMSCII8
);
INSERT INTO t1 (a) VALUES('abc-def');
INSERT INTO t1 (a) VALUES(x'616263AC646566');
INSERT INTO t1 (a) VALUES('\'(),-.');
INSERT INTO t1 (a) VALUES(x'FFA5A4ABACA9');
SELECT *, HEX(a) FROM t1;
SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def';
SELECT *, HEX(a) FROM t1 WHERE a = '\'(),-.';

DROP TABLE t1;

# Clean UP
DROP DATABASE insert_select_db;
