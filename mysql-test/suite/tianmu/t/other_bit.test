--source include/have_tianmu.inc

--echo #
--echo # Test bit
--echo #

--disable_warnings
DROP DATABASE IF EXISTS other_bit_test;
--enable_warnings
CREATE DATABASE other_bit_test;
USE other_bit_test;

CREATE TABLE bit_table(b BIT(11));

INSERT INTO bit_table VALUES (B'10');
INSERT INTO bit_table VALUES (B'00000000000');
INSERT INTO bit_table VALUES (B'11011000000');
INSERT INTO bit_table VALUES (B'01010101010');
--error ER_DATA_TOO_LONG
INSERT INTO bit_table VALUES (B'101011111010');
SELECT b+0 FROM bit_table;
	
CREATE TABLE varbit_table(v BIT (11));
INSERT INTO varbit_table VALUES (B'');
INSERT INTO varbit_table VALUES (B'0');	
INSERT INTO varbit_table VALUES (B'010101');
INSERT INTO varbit_table VALUES (B'01010101010');
--error ER_DATA_TOO_LONG
INSERT INTO varbit_table VALUES (B'101011111010');
SELECT v+0 FROM varbit_table;

# Concatenation
SELECT v+0, b+0, (v || b) AS concat  FROM bit_table, varbit_table ORDER BY b,v;

# Length
#bug1180 SELECT b, length(b) AS lb FROM bit_table;
#bug1180 SELECT v, length(v) AS lv FROM varbit_table;

# Substring
#bug1219 SELECT b+0,
#     SUBSTRING(b FROM 2 FOR 4)+0 AS sub_2_4,
#     SUBSTRING(b FROM 7 FOR 13)+0 AS sub_7_13,
#     SUBSTRING(b FROM 6)+0 AS sub_6
#     FROM bit_table;
# SELECT v+0,
#     SUBSTRING(v FROM 2 FOR 4)+0 AS sub_2_4,
#     SUBSTRING(v FROM 7 FOR 13)+0 AS sub_7_13,
#     SUBSTRING(v FROM 6)+0 AS sub_6
#     FROM varbit_table;

select B'001' & B'10';
select B'0111' | B'011';

# More position tests, checking all the boundary cases
SELECT POSITION(B'1010' IN B'0000101');
SELECT POSITION(B'1010' IN B'00001010');
SELECT POSITION(B'1010' IN B'00000101');
SELECT POSITION(B'1010' IN B'000001010');

SELECT POSITION(B'' IN B'00001010');
SELECT POSITION(B'0' IN B'');
SELECT POSITION(B'' IN B'');
SELECT POSITION(B'101101' IN B'001011011011011000');
SELECT POSITION(B'10110110' IN B'001011011011010');
SELECT POSITION(B'1011011011011' IN B'001011011011011');
SELECT POSITION(B'1011011011011' IN B'00001011011011011');

SELECT POSITION(B'11101011' IN B'11101011');
SELECT POSITION(B'11101011' IN B'011101011');
SELECT POSITION(B'11101011' IN B'00011101011');
SELECT POSITION(B'11101011' IN B'0000011101011');

SELECT POSITION(B'111010110' IN B'111010110');
SELECT POSITION(B'111010110' IN B'0111010110');
SELECT POSITION(B'111010110' IN B'000111010110');
SELECT POSITION(B'111010110' IN B'00000111010110');

SELECT POSITION(B'111010110' IN B'11101011');
SELECT POSITION(B'111010110' IN B'011101011');
SELECT POSITION(B'111010110' IN B'00011101011');
SELECT POSITION(B'111010110' IN B'0000011101011');

SELECT POSITION(B'111010110' IN B'111010110');
SELECT POSITION(B'111010110' IN B'0111010110');
SELECT POSITION(B'111010110' IN B'000111010110');
SELECT POSITION(B'111010110' IN B'00000111010110');

SELECT POSITION(B'111010110' IN B'000001110101111101011');
SELECT POSITION(B'111010110' IN B'0000001110101111101011');
SELECT POSITION(B'111010110' IN B'000000001110101111101011');
SELECT POSITION(B'111010110' IN B'00000000001110101111101011');

SELECT POSITION(B'111010110' IN B'0000011101011111010110');
SELECT POSITION(B'111010110' IN B'00000011101011111010110');
SELECT POSITION(B'111010110' IN B'0000000011101011111010110');
SELECT POSITION(B'111010110' IN B'000000000011101011111010110');

SELECT POSITION(B'000000000011101011111010110' IN B'000000000011101011111010110');
SELECT POSITION(B'00000000011101011111010110' IN B'000000000011101011111010110');
SELECT POSITION(B'0000000000011101011111010110' IN B'000000000011101011111010110');


# Shifting

CREATE TABLE bit_shift_table(b BIT(16));
INSERT INTO bit_shift_table VALUES (B'1101100000000000');
INSERT INTO bit_shift_table SELECT b>>1 FROM bit_shift_table;
INSERT INTO bit_shift_table SELECT b>>2 FROM bit_shift_table;
INSERT INTO bit_shift_table SELECT b>>4 FROM bit_shift_table;
INSERT INTO bit_shift_table SELECT b>>8 FROM bit_shift_table;
#bug1221 SELECT POSITION(B'1101' IN b),
#       POSITION(B'11011' IN b),
#       b
#       FROM bit_shift_table ;
SELECT b+0, b >> 1 AS bsr, b << 1 AS bsl
    FROM bit_shift_table order by bsr;
SELECT b+0, b >> 8 AS bsr8, b << 8 AS bsl8
    FROM bit_shift_table order by bsl8;

DROP TABLE bit_shift_table;

# bit_count
SELECT bit_count(B'0101011100');
SELECT bit_count(B'1111111111');

SELECT CAST(CAST(18446744073709551615 AS UNSIGNED) AS DECIMAL(32))<<0 AS c1;

SELECT 18446744073709551615 ^ 1 AS c1;
SELECT 18446744073709551615.0 ^ 1 AS c1;
SELECT 18446744073709551615e0 ^ 1 AS c1;

SELECT 18446744073709551615 & 18446744073709551615 AS c1;
SELECT 18446744073709551615 & 18446744073709551615.0 AS c1;
SELECT 18446744073709551615 & 18446744073709551615e0 AS c1;
SELECT 18446744073709551615.0 & 18446744073709551615 AS c1;
SELECT 18446744073709551615.0 & 18446744073709551615.0 AS c1;
SELECT 18446744073709551615.0 & 18446744073709551615e0 AS c1;
SELECT 18446744073709551615e0 & 18446744073709551615 AS c1;
SELECT 18446744073709551615e0 & 18446744073709551615.0 AS c1;
SELECT 18446744073709551615e0 & 18446744073709551615e0 AS c1;


SELECT 0 | 18446744073709551615 AS c1;
SELECT 0 | 18446744073709551615.0 AS c1;
SELECT 0 | 18446744073709551615e0 AS c1;
SELECT 18446744073709551615 | 0 AS c1;
SELECT 18446744073709551615.0 | 0 AS c1;
SELECT 18446744073709551615e0 | 0 AS c1;

SELECT ~18446744073709551615 AS c1;
SELECT ~18446744073709551615.0 AS c1;
SELECT ~18446744073709551615e0 AS c1;

SELECT BIT_COUNT(18446744073709551615) AS c1;
SELECT BIT_COUNT(18446744073709551615.0) AS c1;
SELECT BIT_COUNT(18446744073709551615e0) AS c1;

SELECT BIT_COUNT(-9223372036854775808) AS c1;
SELECT BIT_COUNT(-9223372036854775808.0) AS c1;
SELECT BIT_COUNT(-9223372036854775808e0) AS c1;

# clean
drop database other_bit_test;
